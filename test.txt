ASM = nasm
FILES = boot second_stage
BIN_FILES = $(FILES:%=bin/%.bin)

.PHONY: run
.PHONY: build
.PHONY: compile
.PHONY: clean
.PHONY: disk_image
.PHONY: os_image
.PHONU: test

all: $(FILES) compile disk_image os_image

run:
	qemu-system-i386 -drive format=raw,file=TOS.bin,if=ide,index=0,media=disk

build: $(FILES) compile

test:
	dd if=/dev/zero of=TEST.bin bs=512 count=100
	mkfs.fat -F 12 -n "MOCAOS" TEST.bin
	dd if=bin/boot.bin of=TEST.bon conv=notrunc
	mcopy -i TEST.bin test.txt "::test.txt"

disk_image:
	dd if=/dev/zero of=OS.bin bs=512 count=2880
	dd if=/dev/zero of=TOS.bin bs=512 count=2880
	mkfs.fat -F 16 -n "MOCAOS" OS.bin
	dd if=bin/boot.bin of=OS.bin conv=notrunc
	mcopy -i OS.bin test.txt "::test.txt"

os_image:
	dd if=OS.bin of=TOS.bin conv=notrunc
	cat $(BIN_FILES) test_font.bin bin/kernel.bin > temp.bin
	dd if=temp.bin of=TOS.bin conv=notrunc
	rm -rf temp.bin

$(FILES):
	nasm -f bin -o bin/$@.bin Bootloader/$@.s
	nasm -f bin -o test_font.bin test_font.s
compile:
	clang -std=gnu99  -masm=intel -mno-mmx -mno-sse -mno-sse2 -mno-red-zone -mcmodel=kernel -m32 -march=i386 -fno-pic -MMD -mno-80387 -fno-stack-protector -ffreestanding -fno-builtin -nostdinc -O1 -c Kernel/kernel.c -o bin/kernel.o
	ld -m elf_i386 -TKernel/kernel.ld bin/kernel.o --oformat binary -o bin/kernel.bin
	rm -rf paging.o
clean:
	rm -rf *bin/*
	rm -rf *.bin
